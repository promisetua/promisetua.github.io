<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>VS Code 安装文档</title>
      <link href="/2024/07/11/VS%20Code%20%E5%AE%89%E8%A3%85%E6%96%87%E6%A1%A3/"/>
      <url>/2024/07/11/VS%20Code%20%E5%AE%89%E8%A3%85%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="VS-Code-安装文档">VS Code 安装文档</h2><h3 id="一、下载">一、下载</h3><p>进入VS Code官网：<a href="https://code.visualstudio.com">https://code.visualstudio.com</a>，点击 <code>DownLoad for Windows</code>下载windows版本</p><p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20220913194205681.png" alt="image-20220913194205681"></p><p>当然也可以点击旁边的箭头，下载Windows版本 或 Mac OS 版本</p><p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20220913194235945.png" alt="image-20220913194235945"></p><ul><li>Stable：稳定版</li><li>Insiders：内测版</li></ul><h3 id="二、安装">二、安装</h3><p><img src="assets/image-20220913194303018.png" alt="image-20220913194303018"></p><p>双击安装包，选择<code>我同意此协议</code>，再点击<code>下一步</code></p><p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20220522162046996.png" alt="image-20220522162046996"></p><p>选择安装路径，点击<code>下一步</code> 。也可以使用默认值: C:\Users\super\AppData\Local\Programs\Microsoft VS Code</p><p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20220522162201640.png" alt="image-20220522162201640"></p><p>继续点击下一步</p><p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20220522162315843.png" alt="image-20220522162315843"></p><p>可以勾选创建桌面快捷方式，如果不想使用vscode作为代码默认打开方式，可以取消<code>将code注册为受支持的文件类型的编辑器</code>，点击下一步</p><p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20220522162528751.png" alt="image-20220522162528751"></p><p>点击安装，开始安装</p><p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20220522162606538.png" alt="image-20220522162606538"></p><p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20220522162623828.png" alt="image-20220522162623828"></p><p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20220522162633671.png" alt="image-20220522162633671"></p><p>安装完成，运行VS Code。</p><p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20220522163326948.png" alt="image-20220522163326948"></p><h3 id="三、VS-Code插件安装">三、VS Code插件安装</h3><p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20220812153551951.png" alt="image-20220812153551951"></p><p>VS Code提供了非常丰富的插件功能，根据你的需要，安装对应的插件可以大大提高开发效率。</p><p>完成前端开发，常见插件介绍：</p><h4 id="1、Chinese-Simplified-Language-Pack">1、Chinese (Simplified) Language Pack</h4><p>适用于 VS Code 的中文（简体）语言包</p><p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20220522163955686.png" alt="image-20220522163955686"></p><h4 id="2、Code-Spell-Checker">2、Code Spell Checker</h4><p>拼写检查器。比如 banana 单词写错成 banane ，会提示你是否修改成 banana ，也可以将 banane 添加至检查器的字典中。</p><p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20220812153723201.png" alt="image-20220812153723201"></p><h4 id="3、HTML-CSS-Support">3、HTML CSS Support</h4><p>在编写样式表的时候，自动补全功能大大缩减了编写时间。</p><p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20220522164137867.png" alt="image-20220522164137867"></p><h4 id="4、JavaScript-ES6-code-snippets">4、JavaScript (ES6) code snippets</h4><p>支持ES6语法提示</p><p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20220522164226989.png" alt="image-20220522164226989"></p><h4 id="5、Mithril-Emmet">5、Mithril Emmet</h4><p>一个能大幅度提高前端开发效率的一个工具，用于补全代码</p><p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20220522164445770.png" alt="image-20220522164445770"></p><h4 id="6、Path-Intellisense">6、Path Intellisense</h4><p>路径提示插件</p><p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20220522164542982.png" alt="image-20220522164542982"></p><h4 id="7、Vue-3-Snippets">7、Vue 3 Snippets</h4><p>在 Vue 2 或者 Vue 3 开发中提供代码片段，语法高亮和格式化的 VS Code 插件，能极大提高你的开发效率。</p><p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20220522164651541.png" alt="image-20220522164651541"></p><h4 id="8、VueHelper">8、VueHelper</h4><p>vscode最好的vue代码提示插件，不仅包括了vue2所有api，还含有vue-router2和vuex2的代码</p><p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20220522164918079.png" alt="image-20220522164918079"></p><h4 id="9、Auto-Close-Tag">9、Auto Close Tag</h4><p>自动闭合HTML/XML标签</p><p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20220522183524341.png" alt="image-20220522183524341"></p><h4 id="10、Auto-Rename-Tag">10、Auto Rename Tag</h4><p>自动完成另一侧标签的同步修改</p><p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20220522183633805.png" alt="image-20220522183633805"></p><h4 id="11、Beautify">11、Beautify</h4><p>格式化 html ,js,css</p><p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20220522183703756.png" alt="image-20220522183703756"></p><p>安装过程中, 如果提示是否需要继续安装, 选择 “仍要安装”。</p><h4 id="12、Bracket-Pair-Colorizer">12、Bracket Pair Colorizer</h4><p>给括号加上不同的颜色，便于区分不同的区块，使用者可以定义不同括号类型和不同颜色</p><p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20220522183845187.png" alt="image-20220522183845187"></p><p>安装过程中, 如果提示是否需要继续安装, 选择 “仍要安装”。</p><h4 id="13、open-in-browser">13、open in browser</h4><p>vscode不像IDE一样能够直接在浏览器中打开html，而该插件支持快捷键与鼠标右键快速在浏览器中打开html文件，支持自定义打开指定的浏览器，包括：Firefox，Chrome，Opera，IE以及Safari</p><p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20220522183954255.png" alt="image-20220522183954255"></p><h4 id="14、Vetur">14、Vetur</h4><p>Vue多功能集成插件，包括：语法高亮，智能提示，emmet，错误提示，格式化，自动补全，debugger。vscode官方钦定Vue插件，Vue开发者必备。</p><p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20220522184107715.png" alt="image-20220522184107715"></p><h4 id="15、File-Utils">15、File Utils</h4><p>File Utils插件,可以方便快捷的来创建、复制、移动、重命名文件和目录。</p><p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20230306101339092.png" alt="image-20230306101339092"></p><h4 id="16、IntelliJ-IDEA-Keybindings">16、IntelliJ IDEA Keybindings</h4><p>安装VSCode的插件 IntelliJ IDEA Keybindings 即可在VSCode中使用IDEA的快捷键。</p><p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20220913194549794.png" alt="image-20220913194549794"></p><h3 id="四、VS-Code-配置">四、VS Code 配置</h3><p>打开配置面板，根据自己的喜好，可以修改字体、背景样式等偏好设置</p><p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20220522165758191.png" alt="image-20220522165758191"></p><h3 id="五、VS-Code-快捷键">五、VS Code 快捷键</h3><p><img src="https://gitee.com/promisetua/typora-image/raw/master/20200103175529269.png" alt="image-20220522164918079"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端</title>
      <link href="/2024/07/09/%E5%89%8D%E7%AB%AF/"/>
      <url>/2024/07/09/%E5%89%8D%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<img src="https://gitee.com/promisetua/typora-image/raw/master/image-20240709145414212.png" alt="image-20240709145414212" style="zoom: 67%;" /><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20240709172721338.png" alt="image-20240709172721338" style="zoom:67%;" /><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20240709173232022.png" alt="image-20240709173232022" style="zoom:67%;" /><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20240709174658016.png" alt="image-20240709174658016" style="zoom:67%;" /><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20240709174948511.png" alt="image-20240709174948511" style="zoom: 50%;" /><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20240709175719672.png" alt="image-20240709175719672" style="zoom:67%;" /><p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20240709220015822.png" alt="image-20240709220015822"></p><p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20240709220101349.png" alt="image-20240709220101349"></p><p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20240709220228091.png" alt="image-20240709220228091"></p><p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20240709220724875.png" alt="image-20240709220724875"></p><h4 id="⚫-js​">⚫ js​</h4><h5 id="⚪js-引入方式">⚪js 引入方式</h5><p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20240709221553881.png" alt="image-20240709221553881"></p><p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20240709221658569.png" alt="image-20240709221658569"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;hello JS!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/demo.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="⚪-js-基础语法">⚪ js 基础语法</h5><p>输出的三种方式：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">window.alert(&quot;警告框&quot;);</span><br><span class="line">document.write(&quot;输出&quot;);</span><br><span class="line">console.log(&quot;控制台输出&quot;);</span><br></pre></td></tr></table></figure><p>变量：</p><ul><li><p>JavaScript中使用var关键字来声明变量。</p></li><li><p>JavaScript是一门<strong>弱</strong>类型语言，变量可以存放<strong>不同类型</strong>的值。</p></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//var 定义变量</span><br><span class="line">var a = 10;</span><br><span class="line">a = &quot;张三&quot;;</span><br></pre></td></tr></table></figure><p>特点一：作用域比较大，全局变量</p><p>特点二：可以重复定义</p><p>let:局部变量（只在代码块生效）不能重复定义</p><p>const声明的是常量不能被改变</p><p><strong>数据类型</strong></p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20240709230647760.png" alt="image-20240709230647760" style="zoom:67%;" /><img src="C:\Users\nuoyan\AppData\Roaming\Typora\typora-user-images\image-20240709230926141.png" alt="image-20240709230926141" style="zoom:67%;" /><p><strong>⚪ 函数​</strong></p><p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20240710001856843.png" alt="image-20240710001856843"></p><p>函数的调用可以传入任意个参数，但是不一定接收。</p><h4 id="⚫-JS对象">⚫ JS对象</h4><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20240710134952898.png" alt="image-20240710134952898" style="zoom:67%;" /><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20240710135701747.png" alt="image-20240710135701747" style="zoom:67%;" /><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20240710144248486.png" alt="image-20240710144248486" style="zoom:67%;" /><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20240710145012167.png" alt="image-20240710145012167" style="zoom:67%;" /><p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20240711153204978.png" alt="image-20240711153204978"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>反射</title>
      <link href="/2024/07/07/%E5%8F%8D%E5%B0%84/"/>
      <url>/2024/07/07/%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h4 id="⚫什么是反射？">⚫什么是反射？</h4><p>反射允许对成员变量，成员方法和构造方法的信息进行编程访问</p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20240707143902728.png" alt="image-20240707143902728" style="zoom: 50%;" /><p>代码演示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取class对象的三种方式</span></span><br><span class="line"><span class="comment"> * 1.Class.forName(&quot;全类名&quot;);</span></span><br><span class="line"><span class="comment"> * 2.类名.class</span></span><br><span class="line"><span class="comment"> * 3.对象.getClass();</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//全类名最常用 包名加类名</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.jiang.reflect.Student&quot;</span>);</span><br><span class="line"><span class="comment">//多用于参数</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> Student.class;</span><br><span class="line"><span class="comment">//必须先有对象</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"><span class="type">Class</span> <span class="variable">c3</span> <span class="operator">=</span> s.getClass();</span><br></pre></td></tr></table></figure><p>这三个class对象是一样的</p><p>然后就可以通过方法获取成员方法，变量和构造函数。</p><h4 id="⚫动态代理">⚫动态代理</h4><p>1.为什么需要代理</p><p>代理可以无侵入式的对对象增强其他功能</p><p>2.代理长什么样？</p><p>代理里面就是对象要被代理的方法</p><p>3.Java通过什么来保证代理的样子？</p><p>通过接口保证，后面的对象和代理需要实现同一个接口，接口中就是被代理的所有方法</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网络编程</title>
      <link href="/2024/06/27/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
      <url>/2024/06/27/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="1️⃣网络编程三要素​"><strong>1️⃣网络编程三要素​</strong></h4><p><strong>IP</strong>：设备在网络中的地址，是唯一标识。</p><p><strong>端口号</strong>：应用程序在设备中的唯一标识。</p><p><strong>协议</strong>：数据在网络中传输的规则，常见协议有UDP、TCP、http、https、ftp。</p><p><strong>IP：</strong></p><p>IPv4：互联网通信协议第四版，采用32位地址长度，分为4组，点分十进制。</p><p>IPv6：互联网通信协议第六版，采用128位地址长度，分为8组，冒分十六进制表示法。</p><p>显然IPv4是已经不够用了在2019年已经分配完了，需要使用私有地址节省IP，与之对应的是公网地址。</p><p>特殊IP：127.0.0.1也可以是localhost：是回送地址也称本地回环地址，本机IP，永远只会寻找当前所在本机。</p><p>static InetAddress getByName(String host）没有提供构造方法只能用静态方法创建IP对象。</p><p><strong>端口号：</strong></p><p>由两个字节表示的整数，取值范围：0~65535</p><p>其中0-1023的端口用于一些知名的网络服务或者应用，日常使用避开</p><p><strong><font color="red">注意：一个端口号只能被一个应用程序使用。</font></strong></p><p><strong>协议：</strong></p><p><strong>UDP</strong>：用户数据报协议（User Datagram Protocol)</p><p>它是面向<strong>无连接</strong>通信协议。</p><p>特点：速度可快，有大小限制，一次最多发型64K，数据不安全容易丢失。</p><p><strong>TCP</strong>：传输控制协议TCP（Transmission Control Protocol）</p><p>面向<strong>连接</strong>通信协议</p><p>特点：速度慢，没有大小限制，安全。</p><h5 id="UDP通信">UDP通信</h5><p>UDP发送数据：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//整个打包公司</span></span><br><span class="line"><span class="comment">//细节：绑定端口就是通过这个端口发送</span></span><br><span class="line"><span class="comment">//空参：所有可用端口中随机一个使用，有参：指定端口</span></span><br><span class="line"><span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;你好呀&quot;</span>;</span><br><span class="line"><span class="type">byte</span>[] bytes = message.getBytes();</span><br><span class="line"><span class="type">InetAddress</span> <span class="variable">ip</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">10001</span>;</span><br><span class="line"><span class="comment">//打包数据包 需要传输数据的字节数组，传输长度，目标的IP地址以及端口号</span></span><br><span class="line"><span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bytes,bytes.length,ip,port);</span><br><span class="line"><span class="comment">//发送</span></span><br><span class="line">ds.send(dp);</span><br><span class="line"><span class="comment">//释放资源</span></span><br><span class="line">ds.close();</span><br></pre></td></tr></table></figure><p>UDP接收数据：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//找快递员要包裹,注意这里要跟发送端指定的接收端端口号一致</span></span><br><span class="line"><span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">10001</span>);</span><br><span class="line"><span class="comment">//需要一个包来装</span></span><br><span class="line"><span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bytes,bytes.length);</span><br><span class="line">ds.receive(dp); <span class="comment">//这个方法是阻塞状态</span></span><br><span class="line"><span class="comment">//接收到了就可以解析包了</span></span><br><span class="line"><span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(dp.getData());</span><br><span class="line"><span class="type">InetAddress</span> <span class="variable">ip</span> <span class="operator">=</span> dp.getAddress();</span><br><span class="line"><span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> dp.getPort();</span><br><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> dp.getLength();</span><br><span class="line">System.out.println(<span class="string">&quot;从&quot;</span>+ip+<span class="string">&quot;:&quot;</span>+port+<span class="string">&quot;接收到了长度为&quot;</span>+length+<span class="string">&quot;的数据，内容是：&quot;</span>+data);</span><br></pre></td></tr></table></figure><p>先运行接收端，再运行发送端，接收端控制台打印出数据：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">从/<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">55187</span>接收到了长度为<span class="number">9</span>的数据，内容是：你好呀 </span><br></pre></td></tr></table></figure><p>UDP的三种通信方式：单播、组播和广播</p><p>组播地址：224.0.0.0~239.255.255.255</p><p>其中224.0.0.0~224.0.0.255为预留的组播地址</p><p>广播地址：255.255.255.255</p><h5 id="tcp通信">tcp通信</h5>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HTTP协议</title>
      <link href="/2024/06/17/HTTP%E5%8D%8F%E8%AE%AE/"/>
      <url>/2024/06/17/HTTP%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<p>HTTP：超文本传输协议，作为文档传递的协议。让通讯双方能够达成统一共识，完成数据传输。</p><p>HTML：超文本标记语言，是SGML标准通用标记语言的子集，作为文本内容描述的载体。</p><p>URL：统一资源定位符，指定远端文档所在位置。</p><h4 id="相关网络协议：TCP-IP协议族">相关网络协议：TCP/IP协议族</h4><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20240617224245269.png" alt="image-20240617224245269" style="zoom:50%;" /><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20240617224530114.png" alt="image-20240617224530114" style="zoom:50%;" /><p>TCP位于<strong>传输层</strong>，提供<strong>可靠</strong>的字节流服务。将大的数据分割成报文段，并把数据可靠的传输给对方。</p><p>为了朱雀无误的将数据送达，TCP采用<strong>三次握手</strong>策略。</p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20240617225159078.png" alt="image-20240617225159078" style="zoom: 67%;" /><p>DNS（Domin Name System)域名服务，与HTTP一样，位于TCP/IP分层的应用层协议，它负责提供域名到IP地址的解析服务。</p><p>（让IP地址更容易被记住）</p><p>域名：<a href="http://www.baidu.com">www.baidu.com</a>,<a href="http://pic.baidu.com">pic.baidu.com</a>,<a href="http://sport.sina.com.cn">sport.sina.com.cn</a></p><p>根域名：com cn <a href="http://com.cn">com.cn</a> org tech info me</p><p>二级域名：<a href="http://baidu.com">baidu.com</a> <a href="http://sina.com.cn">sina.com.cn</a> <a href="http://qq.com">qq.com</a></p><p>子域名：<a href="http://pic.baidu.com">pic.baidu.com</a> <a href="http://sports.sina.com.cn">sports.sina.com.cn</a></p><p>如果要使用域名完成网络通讯，必须先从域名服务器获取域名对应的IP地址。</p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20240618004349984.png" alt="image-20240618004349984" style="zoom: 42%;" /><h4 id="HTTP（超文本传输协议）是什么？">HTTP（超文本传输协议）是什么？</h4><p>协议：有两个或者多个参与者定义了交互的约定和规范</p><p>传输：http是一个专门用来两点之间传输内容的协议，包括请求方和响应方</p><p>超文本：不仅可以传输文本，还可以传输音频、视频、文件</p><h4 id="URL和URI">URL和URI</h4><p>URI（Uniform Resource Identifier)，统一资源标识符。</p><p>URL（Uniform Resource Locator)，统一资源定位符，也就是网址。</p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20240618005432181.png" alt="image-20240618005432181" style="zoom: 63%;" /><h4 id="请求与响应报文">请求与响应报文</h4><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20240618104528390.png" alt="image-20240618104528390" style="zoom:67%;" /><h4 id="返回结果的HTTP状态码">返回结果的HTTP状态码</h4><p>状态码的范围：001~999</p><p>可以根据需要定义私有的状态码</p><p>状态码是http协议中的标准而非强制规则</p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20240618104108463.png" alt="image-20240618104108463" style="zoom: 67%;" /><h4 id="理解无状态特性和身份的认证技术">理解无状态特性和身份的认证技术</h4><p><strong>Cookie：</strong></p><ul><li>Cookie是服务端下发给客户端</li><li>客户端进行保存</li><li>后续请求时，带着Cookie即身份信息</li><li>不安全，可以随意伪造</li><li>服务端无法判断Cookie内容的真伪</li></ul><p><strong>Session:</strong></p><ul><li>客户端与服务端建议一个短暂的回话</li><li>Session的信息存储在服务器端</li><li>客户端通过Cookie获得Session的ID（难以推测，且有有效时间）</li><li>Session服务端一般是非持久化存储，服务端负荷大</li><li>无法满足集群场景，Session信息不能被共享</li></ul><p><strong>Token：</strong></p><ul><li>令牌是服务端经过加密计算得出的口令串</li><li>再次请求时，对Token进行解密，验证访问者身份</li><li>客户端一般存储在Local Storage，相比cookie更安全</li><li>服务器不存储划着持久化存储，可以多服务器共享</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>多线程</title>
      <link href="/2024/06/05/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2024/06/05/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="🔵-多线程简介">🔵 多线程简介</h4><p>线程：是操作系统能够进行运算调度的最小单位。它包含在<strong>进程</strong>之中，是进程的实际运作单位</p><p>简单理解：应用软件中互相独立，可以同时运行的功能</p><ul><li><p>什么是多线程？</p><p>有了多线程，可以让程序同时做多种事情</p></li><li><p>多线程的作用？</p><p>提高效率</p></li><li><p>多线程应用场景？</p><p>多个事情同时运行</p></li></ul><h4 id="🔴-并发与并行">🔴 并发与并行</h4><p>并发：在同一时刻，有多个指令在单个CPU上<strong>交替</strong>执行</p><p>并行：在同一时刻，有多个指令在多个CPU上<strong>同时</strong>执行</p><h4 id="⚪️-多线程的实现方式">⚪️ 多线程的实现方式</h4><ol><li><p>继承Thread类的方式进行实现</p><p>1）自己定义一个类继承Thread<br>2）重写run方法<br>3）创建子类对象，并启动线程</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread01</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="built_in">this</span>.getName() + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     <span class="type">MyThread01</span> <span class="variable">m1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread01</span>();</span><br><span class="line">     <span class="type">MyThread01</span> <span class="variable">m2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread01</span>();</span><br><span class="line">     m1.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">     m2.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">     m1.start();</span><br><span class="line">     m2.start();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现Runnable接口的方式进行实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread02</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 多线程的第二种启动方式</span></span><br><span class="line"><span class="comment">     * 1.自己定义一个类实现Runnable接口</span></span><br><span class="line"><span class="comment">     * 2.重写run方法</span></span><br><span class="line"><span class="comment">     * 3.创建子类对象</span></span><br><span class="line"><span class="comment">     * 4.创建一个Tread类的对象并开启线程(3为参数）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//获取当前运行的线程对象</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThread02</span> <span class="variable">m1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread02</span>();</span><br><span class="line">        <span class="type">MyThread02</span> <span class="variable">m2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread02</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(m1);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(m2);</span><br><span class="line">        t1.setName(<span class="string">&quot;线程一&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;线程二&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>利用Callable接口和Future接口方式实现</p><p>1）创建一个MyCallable类实现Callable接口</p><p>2）重写call()方法（有返回值，表示线程运行结果）</p><p>3）创建MyCallable对象（表示多线程要执行的任务）</p><p>4）创建FutureTask对象（作用管理多线程的运行结果）</p><p>5）创建Thread类对象，并启动（表示线程）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCallable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">     <span class="type">MyCallable</span> <span class="variable">mc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCallable</span>();</span><br><span class="line">     FutureTask&lt;Integer&gt; ft = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(mc);</span><br><span class="line">     <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ft);</span><br><span class="line">     t.start();</span><br><span class="line">     System.out.println(ft.get());</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>多线程三种实现方式对比</strong></p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20240618160448105.png" alt="image-20240618160448105" style="zoom: 67%;" /><h4 id="⚫-常见的成员方法">⚫ 常见的成员方法</h4><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20240618160637871.png" alt="image-20240618160637871" style="zoom: 50%;" /><h4 id="🔵-线程的生命周期​">🔵 线程的生命周期​</h4><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20240618161302418.png" alt="image-20240618161302418" style="zoom:50%;" /><h4 id="⚪️-线程安全问题">⚪️ 线程安全问题</h4><p>运行过程中随时有可能被别的进程抢走运行权</p><h5 id="同步代码块"><strong>同步代码块</strong></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">synchronized</span> (Tickets01.class)&#123;</span><br><span class="line">        <span class="keyword">if</span> (ticket &lt;= <span class="number">100</span>)&#123;</span><br><span class="line">            System.out.println(getName()+<span class="string">&quot;正在卖第&quot;</span>+ticket+<span class="string">&quot;张票&quot;</span>);</span><br><span class="line">            ticket++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="同步方法">同步方法</h4><p>修饰符 synchronized 返回值类型 方法名（参数）{…}</p><ul><li>特点一：同步方法是锁住方法中所有代码</li><li>特点二：锁对象不能自己指定（非静态：this、静态：当前类的字节码文件对象）</li></ul><p>StringBuilder是不安全的 多线程环境选用StringBuffer</p><p>但是使用同步方法和同步代码块锁都是自动开关，为了更清晰表达如何加锁和释放锁，JDK5以后提供了一个新的锁对象Lock，它提供了获得锁和释放锁的方法</p><p>void lock() : 获得锁</p><p>void unlock() : 释放锁</p><p>Lock是接口不能直接实例化，实现类ReentrantLock来实例化</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (ticket == <span class="number">1000</span>)&#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        ticket++;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;正在售卖第&quot;</span>+ticket+<span class="string">&quot;张票&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    lock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="🔴-等待唤醒机制">🔴 等待唤醒机制</h4><p><strong>常见方法</strong></p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20240620234845724.png" alt="image-20240620234845724" style="zoom: 67%;" /><p>锁的对象来调用上面方法</p><h4 id="🔴线程状态">🔴线程状态</h4><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20240621011238066.png" alt="image-20240621011238066" style="zoom: 67%;" />]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>随机生成名字</title>
      <link href="/2024/05/27/%E9%9A%8F%E6%9C%BA%E7%94%9F%E6%88%90%E5%90%8D%E5%AD%97/"/>
      <url>/2024/05/27/%E9%9A%8F%E6%9C%BA%E7%94%9F%E6%88%90%E5%90%8D%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<p>爬了点姓，和名字，拼一下，随机生成一些男生女生的名字-性别-年龄，参数格式可设置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//定义一个姓氏网站的字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">familyNameNet</span> <span class="operator">=</span> <span class="string">&quot;https://hanyu.baidu.com/shici/detail?from=aladdin&amp;pid=0b2f26d4c0ddb3ee693fdb1137ee1b0d&quot;</span>;</span><br><span class="line">        <span class="comment">//男生名网站字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">boyNameNet</span> <span class="operator">=</span> <span class="string">&quot;http://mingzi.jb51.net/qiming/nanhai/68814860866.html&quot;</span>;</span><br><span class="line">        <span class="comment">//女生名网站字符串 雅源、雅沐、濯欣、琭燕、琦茵</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">girlNameNet</span> <span class="operator">=</span> <span class="string">&quot;http://mingzi.jb51.net/qiming/nvhai/68815554142.html&quot;</span>;</span><br><span class="line">        <span class="comment">//爬取数据，把主页的数据都拼接成字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">familyNameStr</span> <span class="operator">=</span> webCrawler(familyNameNet);</span><br><span class="line">        <span class="type">String</span> <span class="variable">boyNameStr</span> <span class="operator">=</span> webCrawler(boyNameNet);</span><br><span class="line">        <span class="type">String</span> <span class="variable">girlNameStr</span> <span class="operator">=</span> webCrawler(girlNameNet);</span><br><span class="line">        ArrayList&lt;String&gt; familyData = getData(familyNameStr, <span class="string">&quot;([\\W].&#123;3&#125;)(。|，)&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        ArrayList&lt;String&gt; boyData = getData(boyNameStr, <span class="string">&quot;(.&#123;2&#125;[、])&#123;4&#125;.&#123;2&#125;&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        ArrayList&lt;String&gt; girlData = getData(girlNameStr, <span class="string">&quot;(..[、])&#123;4&#125;..&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">//数据还不能直接用要处理一下三个集合的数据</span></span><br><span class="line">        <span class="comment">//处理familyDate 赵钱孙李, 周吴郑王,</span></span><br><span class="line">        ArrayList&lt;String&gt; familyList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s : familyData) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123; <span class="comment">//遍历字符串s.length().fori</span></span><br><span class="line">                familyList.add(s.charAt(i) + <span class="string">&quot;&quot;</span>); <span class="comment">//char转为String</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//处理男生和女生名字，它来正则一样可以定义一个方法</span></span><br><span class="line">        ArrayList&lt;String&gt; boyList = dealDate(boyData);</span><br><span class="line">        ArrayList&lt;String&gt; girlList = dealDate(girlData);</span><br><span class="line">        <span class="comment">//生成数据</span></span><br><span class="line">        ArrayList&lt;String&gt; names = spliceName(familyList, boyList, girlList, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">        Collections.shuffle(names);</span><br><span class="line">        System.out.println(names);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ArrayList&lt;String&gt; <span class="title function_">spliceName</span><span class="params">(ArrayList&lt;String&gt; familyList, ArrayList&lt;String&gt; boyList, ArrayList&lt;String&gt; girlList, <span class="type">int</span> boyCount, <span class="type">int</span> girlCount)</span> &#123;</span><br><span class="line">        HashSet&lt;String&gt; names = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();<span class="comment">//创一个hashset集合来存放拼接的名字有去重的作用</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">//添加男生名字 如果男生名字达标进行下一步</span></span><br><span class="line">            <span class="keyword">if</span> (names.size() == boyCount) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Collections.shuffle(familyList);</span><br><span class="line">            Collections.shuffle(boyList);</span><br><span class="line">            <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();<span class="comment">//我们要18到30岁的</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">manAge</span> <span class="operator">=</span> r.nextInt(<span class="number">13</span>) + <span class="number">18</span>;</span><br><span class="line">            names.add(familyList.get(<span class="number">0</span>) + boyList.get(<span class="number">0</span>) + <span class="string">&quot;-&quot;</span> + <span class="string">&quot;男&quot;</span> + <span class="string">&quot;-&quot;</span> + manAge);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">//添加男生名字 如果男生名字达标进行下一步</span></span><br><span class="line">            <span class="keyword">if</span> (names.size() == boyCount + girlCount) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Collections.shuffle(familyList);</span><br><span class="line">            Collections.shuffle(girlList);</span><br><span class="line">            <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();<span class="comment">//我们要18到25岁的女生</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">womanAge</span> <span class="operator">=</span> r.nextInt(<span class="number">8</span>) + <span class="number">18</span>;</span><br><span class="line">            names.add(familyList.get(<span class="number">0</span>) + girlList.get(<span class="number">0</span>) + <span class="string">&quot;-&quot;</span> + <span class="string">&quot;女&quot;</span> + <span class="string">&quot;-&quot;</span> + womanAge);</span><br><span class="line">        &#125;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">            list.add(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ArrayList&lt;String&gt; <span class="title function_">dealDate</span><span class="params">(ArrayList&lt;String&gt; templist)</span> &#123;</span><br><span class="line">        <span class="comment">//昊玉、新梁、纬博、君临、瑾平, 润新、嘉枫、权康、俊元、星华,</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s : templist) &#123;</span><br><span class="line">            String[] arr = s.split(<span class="string">&quot;、&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (String string : arr) &#123;</span><br><span class="line">                list.add(string);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">webCrawler</span><span class="params">(String familyNameNet)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1.定义一个StringBuilder拼接爬到的数据</span></span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="comment">//2.创建一个URL对象</span></span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(familyNameNet);</span><br><span class="line">        <span class="comment">//3.链接上这个网址</span></span><br><span class="line">        <span class="type">URLConnection</span> <span class="variable">conn</span> <span class="operator">=</span> url.openConnection();</span><br><span class="line">        <span class="comment">//4.读取数据(因为有中文所以要把字节流转换成字符流)</span></span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(conn.getInputStream());</span><br><span class="line">        <span class="type">int</span> line;</span><br><span class="line">        <span class="keyword">while</span> ((line = isr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            sb.append((<span class="type">char</span>) line);</span><br><span class="line">        &#125;</span><br><span class="line">        isr.close();</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ArrayList&lt;String&gt; <span class="title function_">getData</span><span class="params">(String str, String regex, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="comment">//1.创建集合存放数据</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//2.按照正则表达式的规则，获取数据</span></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regex);</span><br><span class="line">        <span class="comment">//3.按照pattern的规则，到str中获取数据</span></span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(str);</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            list.add(matcher.group(index));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JAVA学习笔记</title>
      <link href="/2024/05/23/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/05/23/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="⚡File文件类">⚡File文件类</h2><p><strong>File构造方法</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\aaa&quot;</span>);</span><br><span class="line"><span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\1aaa&quot;</span>,<span class="string">&quot;\\bbb&quot;</span>);</span><br><span class="line"><span class="type">File</span> <span class="variable">f3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(f1,<span class="string">&quot;\\bbb&quot;</span>);</span><br></pre></td></tr></table></figure><p>File的一些<strong>成员方法</strong>用来判断存在和返回一些文件信息</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">file.isFile()</span><br><span class="line">file.isDirectory()</span><br><span class="line">file.exists()</span><br><span class="line">f1.getPath()</span><br><span class="line">file.getAbsoluteFile()</span><br><span class="line">ile.lastModified()</span><br><span class="line">f1.length()</span><br></pre></td></tr></table></figure><p>createNewFile()方法只会创建文件,如果文件夹<strong>不为空</strong>则删除不成功</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">f.createNewFile()j</span><br></pre></td></tr></table></figure><p>file.listFiles()返回当前文件夹的所有东西，获取并遍历文件,返回当前目录的所有文件和目录，隐藏文件也可以，如果没有权限，或者路径不存在，以及路径是一个文件返回null,空文件夹的话返回0。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(parent,child);</span><br><span class="line">File[] files = file.listFiles();</span><br><span class="line"><span class="keyword">for</span> (File file1 : files) &#123;</span><br><span class="line">    System.out.println(file1.getPath());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>delete()方法删除文件和空文件夹是直接删除<strong>不会走回收站</strong>，如果文件夹不为空则删除不了，mkdirs()方法可以创建<strong>多级目录</strong>。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">f.delete()</span><br><span class="line">mkdirs()</span><br></pre></td></tr></table></figure><p>写一个寻找电脑所有指定格式后缀文件的代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 寻找电脑上所有avi格式的文件</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        findPan();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//写一个方法来遍历盘符分别调用findFind方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">findPan</span><span class="params">()</span>&#123;</span><br><span class="line">        File[] files = File.listRoots();</span><br><span class="line">        <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">            findFile(file);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//写一个方法递归调用自己找文件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">findFile</span><span class="params">(File file)</span> &#123;</span><br><span class="line">        File[] files = file.listFiles();</span><br><span class="line">        <span class="keyword">if</span> (files != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (File file1 : files) &#123;</span><br><span class="line">                <span class="comment">// 如果是文件，那就判断一下后缀，保留</span></span><br><span class="line">                <span class="keyword">if</span> (file1.isFile() &amp;&amp; file1.getName().endsWith(<span class="string">&quot;.yml&quot;</span>)) &#123;</span><br><span class="line">                    System.out.println(file1.getPath());</span><br><span class="line">                &#125; <span class="keyword">else</span></span><br><span class="line">                <span class="comment">// 如果不是文件那就递归调用这个方法，找下一级目录</span></span><br><span class="line">                &#123;</span><br><span class="line">                    findFile(file1);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="⚡IO流">⚡IO流</h2><h4 id="🌵-IO流的继承结构">🌵 IO流的继承结构</h4><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20240525173243413.png" alt="image-20240525173243413" style="zoom: 42%;" /><h4 id="🌵-什么是IO流？">🌵 什么是IO流？</h4><p>存储、读取数据的解决方案</p><h4 id="🌵-IO流的分类">🌵 IO流的分类</h4><p>按方向分可以分为：输入流和输出流</p><p>按文件类型可以分为：字符流和字节流</p><p>字节输入流：InputStream字节输出流：OutputStream</p><p>字符输入流：Reader字符输出流：Writer</p><p>这四种都是<strong>抽象类</strong></p><h4 id="🌵-OutputStream">🌵 OutputStream</h4><p>1.创建对象</p><p>2.写入数据</p><p>3.释放流</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:\\aaa\\2b.txt&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">fos.write(<span class="number">97</span>);</span><br><span class="line">fos.close();</span><br></pre></td></tr></table></figure><p>true打开就可以续写，换行的话需要写入换行符**“\r\n”**，write()方法可以传递三种参数：</p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20240523122821714.png" alt="image-20240523122821714" style="zoom:80%;" /><h4 id="🌵-InputStream">🌵 InputStream</h4><p>1.创建对象</p><p>2.写入数据</p><p>3.释放流</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\aaa\\2b.txt&quot;</span>);</span><br><span class="line">System.out.println(fis.read());</span><br><span class="line">fis.close();</span><br></pre></td></tr></table></figure><h6 id="FileInputStream书写细节：">FileInputStream书写细节：</h6><p>​<strong>1️⃣</strong> 创建字节输入流对象</p><p>​如果文件不存在，就直接报错</p><p>​<strong>2️⃣</strong> 读取数据</p><p>​1.一次读一个字节，读出来的数据是ASCII上对应的数字。</p><p>​2.读到文件的末尾，read方法返回-1。</p><p>​3️⃣ 释放资源​</p><p>​每次使用完流，都必须要释放资源</p><h6 id="循环读取文件">循环读取文件</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\aaa\\2b.txt&quot;</span>);</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="keyword">while</span> ((t = fis.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">        System.out.print((<span class="type">char</span>)t);</span><br><span class="line">    &#125;</span><br><span class="line">    fis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里定义一个变量t的原因是：read方法表示读取数据，而且是读取一个数据就<strong>移动一次指针</strong>。</p><p>但是这种拷贝文件速度太慢了，一次拷贝一个字节，我们可以给write()方法传入一个字节数组</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//优化拷贝文件 write（）传入字节数组</span></span><br><span class="line"><span class="comment">//测试一下程序巡行时间</span></span><br><span class="line"><span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;C:\\Users\\nuoyan\\Videos\\Captures\\123456.mp4&quot;</span>);</span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;C:\\Users\\nuoyan\\Videos\\Captures\\copy.mp4&quot;</span>);</span><br><span class="line"><span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span> * <span class="number">1024</span> *<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="keyword">while</span> ((len = fis.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">    fos.write(bytes,<span class="number">0</span>, len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//释放资源先打开后关闭</span></span><br><span class="line">fos.close();</span><br><span class="line">fis.close();</span><br><span class="line"><span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">System.out.println(end-start);</span><br></pre></td></tr></table></figure><h4 id="🌵-try…catch">🌵 try…catch</h4><p><strong><font color=red>finally里面的代码一定会执行，除非虚拟机停止</font></strong></p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20240525163045212.png" alt="image-20240525163045212" style="zoom: 63%;" /><h4 id="🌵-字符集">🌵 字符集</h4><p>在计算机中，任意的数据都是以<strong>二进制</strong>的形式来存储的</p><p><strong>字节</strong>是计算机中<strong>最小</strong>的存储单元，英文字母只需要一个字节（8个比特位），而汉字占<strong>两个</strong>字节</p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20240525164220507.png" alt="image-20240525164220507" style="zoom: 40%;" /><p>计算机的存储规则：汉字（<strong>GBK</strong>），两个字节存储</p><p>简体中文版本的Windows，默认使用GBK字符集（完全兼容ASCII字符集）</p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20240525164802782.png" alt="image-20240525164802782" style="zoom:40%;" /><p>核心：GBK中汉字的<strong>高位字节</strong>是以<strong>1</strong>开头的，英文是以<strong>0</strong>开头的</p><p><strong>UTF-8</strong>编码规则: 用1-4个字节保存（utf-8是Unicode字符集的一种编码方式）</p><p><strong>英文</strong>占一个字节，二进制第一位是<strong>0</strong>，转成十进制是<strong>正数</strong></p><p><strong>中文</strong>占三个字节（1110,10,10），剩余用实际数据补齐，二进制第一位是<strong>1</strong>，第一个字节转成十进制是<strong>负数</strong></p><h6 id="出现乱码的原因：">出现乱码的原因：</h6><p>1.读取数据时没有读完整个汉字</p><p>2.编码和解码打的方式不统一</p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20240525170407177.png" alt="image-20240525170407177" style="zoom: 40%;" /><h6 id="如何不产生乱码？">如何不产生乱码？</h6><p><strong>1️⃣</strong> .不要用字节流读取文本文件</p><p><strong>2️⃣</strong> .编码解码使用同一个码表，同一个编码方式</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.编码</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;love一你&quot;</span>;</span><br><span class="line"><span class="type">byte</span>[] bytes1 = str.getBytes();<span class="comment">//默认编码</span></span><br><span class="line">System.out.println(Arrays.toString(bytes1));<span class="comment">//数组转换成String类型输出</span></span><br><span class="line"><span class="comment">//2.解码</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes1);</span><br><span class="line">System.out.println(str1);</span><br><span class="line"><span class="comment">//3.如果编码解码使用的码表、编码方式不一样</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes1,<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">System.out.println(str2);</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[<span class="number">108</span>, <span class="number">111</span>, <span class="number">118</span>, <span class="number">101</span>, -<span class="number">28</span>, -<span class="number">72</span>, -<span class="number">128</span>, -<span class="number">28</span>, -<span class="number">67</span>, -<span class="number">96</span>]</span><br><span class="line">love一你</span><br><span class="line">love涓�浣�</span><br></pre></td></tr></table></figure><h4 id="🌵-字符流">🌵 字符流</h4><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20240525172947491.png" alt="image-20240525172947491" style="zoom:44%;" /><p>字符流的继承结构：</p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20240525181429893.png" alt="image-20240525181429893" style="zoom:44%;" /><h6 id="🌵-FileReader">🌵  FileReader</h6><p><strong>int read( )函数</strong> ：该函数的返回值为int数值，表示读取的字符对应的<strong>ascii码</strong>,当返回为-1表示读取到文件末尾。</p><p><strong>1️⃣</strong> .字符流的底层也是字节流，默认是一个字节一个字节读取。</p><p><strong>2️⃣</strong> .如果遇到中文就会一次读取多个，GBK一次读取两个字节，UTF-8一次读取三个字节。</p><p><strong>3️⃣</strong> .read()读取后，方法的底层会进行解码并且转成十进制</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.创建对象并且关联文件</span></span><br><span class="line"><span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;..\\new02\\text.txt&quot;</span>,);</span><br><span class="line"><span class="comment">//2.读取数据read()</span></span><br><span class="line"><span class="type">int</span> ch;</span><br><span class="line"><span class="keyword">while</span> ((ch = fr.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">    System.out.print((<span class="type">char</span>)ch);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.释放资源</span></span><br><span class="line">fr.close();</span><br></pre></td></tr></table></figure><p><strong>read(chars)</strong> 带参数：读取数据，解码，强转合并，把强转之后的字符放到数组中</p><p>也就相当于：<strong>read(chars)  = read() + 强制类型转换</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.创建对象并且关联文件，可以指定字符集读取文件（第二个参数）</span></span><br><span class="line"><span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;..\\new02\\text.txt&quot;</span>,Charset.forName(<span class="string">&quot;GBK&quot;</span>));</span><br><span class="line"><span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">2</span>];</span><br><span class="line"><span class="comment">//2.读取数据read()</span></span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="keyword">while</span> ((len = fr.read(chars)) != -<span class="number">1</span>)&#123; <span class="comment">//len接收返回的数组长度</span></span><br><span class="line">    System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(chars,<span class="number">0</span>,len));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.释放资源</span></span><br><span class="line">fr.close();</span><br></pre></td></tr></table></figure><h6 id="🌵-FileWriter">🌵  FileWriter</h6><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20240525181726535.png" alt="image-20240525181726535" style="zoom:44%;" /><p>FileWriter的write方法可以传入字符、字符数组、字符串</p><p>FileWriter的构造方法的第二个参数可以设置为true开启续写</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.创建对象并且关联文件</span></span><br><span class="line"><span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;..\\new02\\text.txt&quot;</span>,<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//2.write()</span></span><br><span class="line">fw.write(<span class="number">25105</span>);</span><br><span class="line"><span class="type">char</span>[] chars = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>&#125;;</span><br><span class="line">fw.write(chars);</span><br><span class="line">fw.write(<span class="string">&quot;你好呀，我写入一个字符串&quot;</span>);</span><br><span class="line"><span class="comment">//3.释放资源</span></span><br><span class="line">fw.close();</span><br></pre></td></tr></table></figure><h6 id="🌵-练习一：复制文件夹">🌵  练习一：复制文件夹</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">pratice01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//复制一个文件夹 包括子目录</span></span><br><span class="line">        <span class="comment">//创建原文件夹和目标文件夹的文件对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">src</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\1aaa\\bbb\\2&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">dest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\1aaa\\bbb\\1&quot;</span>);</span><br><span class="line">        <span class="comment">//调用方法复制文件夹</span></span><br><span class="line">        copyfile(src,dest);</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">copyfile</span><span class="params">(File src, File dest)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//创建一个目的文件夹如果目的文件夹为空</span></span><br><span class="line">        dest.mkdirs();</span><br><span class="line">        <span class="comment">//进入src目录判断路径下的是文件还是文件夹</span></span><br><span class="line">        File[] files = src.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">            <span class="comment">//如果是文件直接复制</span></span><br><span class="line">            <span class="keyword">if</span> (file.isFile())&#123;</span><br><span class="line">                <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">                <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(dest,file.getName()));</span><br><span class="line">                <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="type">int</span> len;</span><br><span class="line">                <span class="keyword">while</span> ((len = fis.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                    fos.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">                &#125;</span><br><span class="line">                fos.close();</span><br><span class="line">                fis.close();</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//如果是文件夹递归调用copyfile方法</span></span><br><span class="line">                copyfile(file,<span class="keyword">new</span> <span class="title class_">File</span>(dest,file.getName()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="🌵-练习二：加密图像（异或）">🌵  练习二：加密图像（异或）</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\1aaa\\bbb\\2.jpg&quot;</span>);</span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:\\1aaa\\bbb\\3.jpg&quot;</span>);</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">    <span class="keyword">while</span> ((b = fis.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">        fos.write(b^<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">    fos.close();</span><br><span class="line">    fis.close();</span><br></pre></td></tr></table></figure><h4 id="🌵-缓冲流">🌵  缓冲流</h4><p>1️⃣  缓冲流有几种？</p><p>​字节缓冲输入流：BufferedInputStream</p><p>​字节缓冲输出流：BufferedOnputStream</p><p>​字符缓冲输入流：BufferedReader</p><p>​字符缓冲输出流：BufferedWriter</p><p>2️⃣ 缓冲流为什么能提高性能</p><p>​缓冲流自带长度为8192的缓冲区</p><p>​可以显著提高字节流的读写能力</p><p>​对于字符流提升不明想，但是有两个特有的方法</p><p>3️⃣ 字符缓冲流的两个特有方法是什么？</p><p>​字符缓冲输入流BufferedReader：readLine()</p><p>​字符缓冲输出流BufferedWriter：newLine()</p><p>**练习：**把以数字.开头的乱序句子重新按照数字排序：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.读取数据</span></span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;D:\\1aaa\\bbb\\123.txt&quot;</span>));</span><br><span class="line">String line;</span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"><span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">    list.add(line);</span><br><span class="line">&#125;</span><br><span class="line">br.close();</span><br><span class="line"><span class="comment">//2.排序</span></span><br><span class="line">Collections.sort(list, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(String o1, String o2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> Integer.parseInt(o1.split(<span class="string">&quot;\\.&quot;</span>)[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> Integer.parseInt(o2.split(<span class="string">&quot;\\.&quot;</span>)[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> i1 - i2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//3.写出</span></span><br><span class="line"><span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;D:\\1aaa\\bbb\\123.txt&quot;</span>));</span><br><span class="line"><span class="keyword">for</span> (String str : list) &#123;</span><br><span class="line">    bw.write(str);</span><br><span class="line">    bw.newLine();</span><br><span class="line">&#125;</span><br><span class="line">bw.close();</span><br></pre></td></tr></table></figure><p><strong>注意：IO流用的时候打开，不用了就关闭</strong></p><h6 id="🌵-缓冲流练习">🌵  缓冲流练习</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;\\D:\\1aaa\\bbb\\123.txt&quot;</span>)));</span><br><span class="line">String line;</span><br><span class="line"><span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">    System.out.println(line);</span><br><span class="line">&#125;</span><br><span class="line">br.close();</span><br></pre></td></tr></table></figure><h4 id="🌵-序列化流">🌵  序列化流</h4><p>使用对象输出流将对象保存到文件时会出现NotSerializableException异常</p><p>解决方案：需要让javabean类事项Serializable接口（标记）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.创建对象</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zhangsan&quot;</span>,<span class="number">12</span>);</span><br><span class="line"><span class="comment">//也可以把多个对象添加到集合中输出</span></span><br><span class="line"><span class="comment">//2.创建序列化流对象/对象操作输出流</span></span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;a.txt&quot;</span>));</span><br><span class="line"><span class="comment">//3.写出数据</span></span><br><span class="line">oos.writeObject(s);</span><br><span class="line"><span class="comment">//4.释放资源</span></span><br><span class="line">oos.close();</span><br></pre></td></tr></table></figure><h4 id="🌵-反序列化流">🌵  反序列化流</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.创建反序列化流对象/对象操作输入流</span></span><br><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;a.txt&quot;</span>));</span><br><span class="line"><span class="comment">//2.取出数据并且输出</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) ois.readObject();</span><br><span class="line">ArrayList&lt;Student&gt; list = (ArrayList&lt;Student&gt;) ois.readObject();</span><br><span class="line">System.out.println(student);</span><br><span class="line"><span class="comment">//3.释放资源</span></span><br><span class="line">ois.close();</span><br></pre></td></tr></table></figure><p>如果序列化到文件后，改变javabean的数据，文件就不能反序列化了会报错</p><p>比如：stream classdesc serialVersionUID = 2763712405474558593, local class serialVersionUID = -7712509590624898209</p><p>就是两个serialVersionUID不一样了，这时候就得手动设置一下javabean的serialVersionUID，让它保持不变</p><p>可以手动设置，也可以勾选IDEA中设置的这两个选项自动生成。</p><p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20240526123939623.png" alt="image-20240526123939623"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">7712509590624898209L</span>;</span><br></pre></td></tr></table></figure><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20240526124550030.png" alt="image-20240526124550030" style="zoom: 50%;" /><h4 id="🌵-打印流">🌵  打印流</h4><h6 id="🌵-字节打印流">🌵  字节打印流</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.创建字节打印流对象(true:自动刷新)</span></span><br><span class="line"><span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;a.txt&quot;</span>), <span class="literal">true</span>, Charset.forName(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line"><span class="comment">//2.写出数据</span></span><br><span class="line">ps.print(<span class="number">97</span>);</span><br><span class="line">ps.println(<span class="number">97</span>);</span><br><span class="line">ps.printf(<span class="string">&quot;%s喜欢%s&quot;</span>,<span class="string">&quot;小张&quot;</span>,<span class="string">&quot;小刘&quot;</span>);</span><br><span class="line"><span class="comment">//3.释放资源</span></span><br><span class="line">ps.close();</span><br></pre></td></tr></table></figure><h6 id="🌵-字符打印流">🌵  字符打印流</h6><p>PrintStream变成PrintWriter</p><h6 id="🌵-打印流跟输出语句的关系">🌵  打印流跟输出语句的关系</h6><p>很有意思的一点，我们看到打印流的成员方法跟输出语句很像</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">System.out.println();</span><br></pre></td></tr></table></figure><p>我们Ctrl+B跟进一下源码发现：</p><p>​其实System是java定义好的一个final类，不能有子类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">System</span> </span><br></pre></td></tr></table></figure><p>​out是System类里面的final修饰的一个静态变量</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">PrintStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>​这个流就不能关闭了如果关闭了输出语句就失效了</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">PrintStream</span> <span class="variable">out</span> <span class="operator">=</span> System.out;</span><br><span class="line">out.print();</span><br><span class="line">out.close();</span><br></pre></td></tr></table></figure><h4 id="🌵-解压缩流">🌵  解压缩流</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZipStreamDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//首先先设置解压的文件路径，和目的路径</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">src</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\1aaa\\bbb\\1.zip&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">dest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\1aaa\\bbb\\&quot;</span>);</span><br><span class="line">        <span class="comment">//写一个解压方法</span></span><br><span class="line">        unzip(src,dest);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unzip</span><span class="params">(File src, File dest)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//解压的本质：把压缩包里面的每一个文件或者文件夹拿出来，按照层级拷贝</span></span><br><span class="line">        <span class="type">ZipInputStream</span> <span class="variable">zis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(src));</span><br><span class="line">        <span class="comment">//先获取到压缩包里的每个zipentry对象</span></span><br><span class="line">        ZipEntry nextEntry;</span><br><span class="line">        <span class="keyword">while</span> ((nextEntry = zis.getNextEntry()) != <span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(nextEntry);</span><br><span class="line">            <span class="comment">//判断一下nextEntry对象是文件还是文件夹</span></span><br><span class="line">            <span class="keyword">if</span> (nextEntry.isDirectory())&#123;</span><br><span class="line">                <span class="comment">//如果是文件夹，需要在dest创建一个同名文件夹</span></span><br><span class="line">                <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(dest,nextEntry.toString());</span><br><span class="line">                file.mkdirs();</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//如果是文件就拷贝，那就需要一个输出流</span></span><br><span class="line">                <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(dest,nextEntry.toString()));</span><br><span class="line">                <span class="type">int</span> b;</span><br><span class="line">                <span class="keyword">while</span> ((b = zis.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">                    fos.write(b);</span><br><span class="line">                &#125;</span><br><span class="line">                fos.close();</span><br><span class="line">                <span class="comment">//一个文件处理完了</span></span><br><span class="line">                zis.closeEntry();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        zis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一定要注意的是！！犯了很多次错，拷贝文件肯定最后都是以<strong>文件</strong>结束！！！！</p><h4 id="🌵commons-io">🌵commons-io</h4><p>Commons IO（Apache Commons IO）是一个广泛用于 <a href="https://so.csdn.net/so/search?q=Java&amp;spm=1001.2101.3001.7020">Java</a> 开发的开源工具库，由Apache软件基金会维护和支持。这个库旨在简化文件和流操作，提供了各种实用工具类和方法，以便更轻松地进行输入输出操作。以下是 Commons IO 的一些主要特点和功能：</p><p>**1.文件操作：**Commons IO 提供了大量用于文件和目录操作的方法，包括创建、删除、重命名、复制、移动文件，以及递归地操作目录结构。</p><p>**2.流处理：**你可以使用 Commons IO 处理各种输入和输出流，包括读取、写入和操作流数据。这对于处理文本文件、二进制文件以及网络通信非常有用。</p><p><strong>3.文件过滤和筛选</strong>：Commons IO 允许你轻松地筛选文件和目录，根据各种条件，如文件扩展名、文件大小、最后修改时间等。</p><p>**4.文件内容操作：**你可以比较两个文件的内容，查找文件中的文本，以及进行替换等操作。</p><p>**5.自动关闭流：**Commons IO 提供了自动关闭流的功能，确保在处理文件和流时，资源得以正确释放，而无需显式调用close()方法。</p><p>**6.异常处理：**库中的方法通常会处理 I/O 异常，以简化代码中的错误处理。</p><p>**7.性能和可靠性：**Commons IO 被广泛使用，因为它经过了精心设计，以提供高性能和可靠性。这对于处理大型文件和在生产环境中运行的应用程序非常重要。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>windows激活工具</title>
      <link href="/2024/05/22/windows%E6%BF%80%E6%B4%BB%E5%B7%A5%E5%85%B7/"/>
      <url>/2024/05/22/windows%E6%BF%80%E6%B4%BB%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>激活工具虽然不像其他常用软件，可能一年都用不了几次，但放一个在U盘以备不时之需还是很有必要的。这期阿闲就给大家准备了一款-HEU KMS Activator，绝对是良心中的战斗机~</p><p><strong>HEU KMS Activator（电脑）</strong></p><p>软件由大佬@知彼而知己开发，大小才4.5MB，**支持离线激活，**<strong>完全免费</strong>，无需安装，解压后双击运行exe文件即可启动。</p><table><thead><tr><th><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/Wt1ZHKUr5ADNesiaz2kK8R0kRlpncIqsHIpWqEXjqZSeRtHz5wMPmlHk03iczABmBHMlXUTuhY0DJBqp32LHq8XA/640?wx_fmt=png&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片" style="zoom:80%;" /></th><th><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/Wt1ZHKUr5ADNesiaz2kK8R0kRlpncIqsHdA3grticbqmCbGattEknzdAhbZEqjKibqmbiaOSA6KGGERsEum0gZQibDw/640?wx_fmt=png&amp;from=appmsg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt=""></th></tr></thead></table><p>软件支持激活Windows和Office，提供智能激活、KMS激活和数字激活，<strong>如果看不懂，直接选择智能激活就行</strong>，点击开始即可。</p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/Wt1ZHKUr5ADNesiaz2kK8R0kRlpncIqsHZhicHWMor2tUDbnoOj4aHATX73sia3ZfwngfjYd7bR1LAhtVRoW31rGg/640?wx_fmt=png&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片" style="zoom: 50%;" /><p>软件支持查看Windows和Office的激活状态，以及重制重制授权状态，选择好后点击右侧的花瓣按钮。</p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/Wt1ZHKUr5ADNesiaz2kK8R0kRlpncIqsHzUseP5o1icvF8Mn0Dkia6yq8KCicaAw9B2Ueic1gwAx9XEdcIqIAcQc5Ng/640?wx_fmt=png&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片" style="zoom:50%;" /><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/Wt1ZHKUr5ADNesiaz2kK8R0kRlpncIqsHKFnkYupcdIJrujx4VtcRnkZ7yqYXiaKL9VqdR4rWPr9Ln5sDlwVIAtw/640?wx_fmt=png&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片" style="zoom:50%;" /><p><strong>下载地址</strong></p><p><strong>github地址：</strong></p><p><a href="https://github.com/zbezj/HEU_KMS_Activator/releases">https://github.com/zbezj/HEU_KMS_Activator/releases</a></p><p><strong>直接下载:</strong></p><p><a href="https://wwp.lanzoul.com/b00talhphg">https://wwp.lanzoul.com/b00talhphg</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>强力下载器IDM</title>
      <link href="/2024/05/20/%E5%BC%BA%E5%8A%9B%E4%B8%8B%E8%BD%BD%E5%99%A8IDM/"/>
      <url>/2024/05/20/%E5%BC%BA%E5%8A%9B%E4%B8%8B%E8%BD%BD%E5%99%A8IDM/</url>
      
        <content type="html"><![CDATA[<p><strong>IDM简介</strong></p><p>Internet Download Manager (简称IDM) Windows 平台功能强大的多线程下载工具，国外非常受欢迎。</p><p>功能和特点：</p><p>支持断点续传，支持嗅探视频音频，接管所有浏览器，具有站点抓取、批量下载队列、计划任务下载，自动识别文件名、静默下载、网盘下载支持等功能。</p><p><strong>IDM测试截图</strong></p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20240520220902317.png" alt="image-20240520220902317" style="zoom: 50%;"/><p>IDM软件就在<a href="http://www.internetdownloadmanager.com">官网</a>直接下载就好</p><p><a href="https://www.aliyundrive.com/s/STN1sJ3wXpa">激活工具下载</a>好后解压，管理员权限打开下面这个程序</p><p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20240520223251991.png" alt="image-20240520223251991"></p><p>然后在这个界面里，如果你已经安装了软件，那么直接选择“1”进行鸡和，如果没下载软件，点“4”下载软件后，再点“1”进行激活。</p><img src="https://gitee.com/promisetua/typora-image/raw/master/640" alt="图片" style="zoom:50%;" /><p>然后过程填写一个ID作为激活账户然后等程序结束就好了。</p><p>这时候打开IDM已经成功激活。</p><p><img src="https://gitee.com/promisetua/typora-image/raw/master/image-20240520222608147.png" alt="image-20240520222608147"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>阅读app</title>
      <link href="/2024/05/20/%E9%98%85%E8%AF%BBapp/"/>
      <url>/2024/05/20/%E9%98%85%E8%AF%BBapp/</url>
      
        <content type="html"><![CDATA[<p><strong>第一款：阅读+书源</strong></p><p>​阅读这款APP虽然作者停更了，但是软件还是挺强大的，只要有人制作书源，那么软件有没有人维护现在都是非常优秀！</p><p>今天带来的书源有点多，大家文末自己去获取。我在这里给大家介绍导入的方法。我的方法是把书源发到VX的文件助手里，然后保存到本地。</p><table><thead><tr><th style="text-align:center"><img src="https://gitee.com/promisetua/typora-image/raw/master/640.webp" alt="640" style="zoom:33%;" /></th><th style="text-align:center"><img src="https://gitee.com/promisetua/typora-image/raw/master/640-1716189978471-1.webp" alt="640-1716189978471-1"  style="zoom:33%; " /></th></tr></thead></table><p>打开阅读的APP，找到“书源管理”，然后选择“本地导入”。</p><table><thead><tr><th style="text-align:center"><img src="https://gitee.com/promisetua/typora-image/raw/master/640-1716189978471-2.webp" alt="640-1716189978471-2" style="zoom:33%;" /></th><th style="text-align:center"><img src="https://gitee.com/promisetua/typora-image/raw/master/640-1716189978471-3.webp" alt="640-1716189978471-3" style="zoom:33%;" /></th></tr></thead></table><p>然后选择“自带文件选择器”，找到“Download—WeiXin”，选择刚刚保存的书源进行导入即可。</p><img src="https://gitee.com/promisetua/typora-image/raw/master/640-1716191241800-25.webp" alt="640-1716191241800-25" style="zoom:33%;" /><p>如果有网络资源，也可以通过网络的导入方式。</p><img src="https://gitee.com/promisetua/typora-image/raw/master/640-1716191241800-27.webp" alt="640-1716191241800-27" style="zoom:50%;" /><p>网络的源我找了几个，但测试后发现跟本地的源差不多，在这里我就不给大家提供了！<br><a href="https://pan.baidu.com/s/1vmXpOjxSZso_m3FTPZde-w?pwd=8888">百度</a>、<a href="https://pan.quark.cn/s/a4f0882ba0a5">夸克</a>和<a href="https://www.alipan.com/s/V2HAPacpZ8o">阿里</a>下载。</p><p><strong>第二款：番茄小说</strong></p><p>​番茄小说大家都不陌生，也是出了起点之外的最热门的小说阅读App，而是是全免费书籍，但是我们应用商店下载的版本，广告很多，非常影响阅读体验，今天推荐一个基本没广告番茄小说的版本，记得不要更新！</p><p>下载地址：<a href="https://pan.baidu.com/s/1v32Rh1USVnScxh-RErYNyg?pwd=rc36">百度网盘</a></p><img src="/image/e8828775872ac4852eff00b1c993f70.jpg" alt="" style="zoom:33%;" /><p><strong>彩蛋</strong>：AI网站推荐一个，非常好用,<a href="https://chat18.aichatos8.com">点击</a>跳转。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>EV录屏</title>
      <link href="/2024/05/20/EV%E5%BD%95%E5%B1%8F/"/>
      <url>/2024/05/20/EV%E5%BD%95%E5%B1%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="EV录屏（PC端）">EV录屏（PC端）</h3><p>下载链接：<a href="https://pan.baidu.com/s/1CMYzvCs9lJL_YQf9QPCetQ?pwd=8888">百度</a>，<a href="https://pan.quark.cn/s/96b7b847d739">夸克</a>，<a href="https://www.alipan.com/s/DkLfSS4iWMA">阿里</a></p><p>现在的EV录屏是会员制度，但是其会员是针对一些高级功能，对于普通的录屏功能，它完全免费。</p><p>今天介绍的这个版本是2016版，其原是绿色版本，被千千制作成了单文件版，这个版本是完全免费，无时长录制限制，无水印。</p><p><img src="../image/640.png" alt="图片"></p><p>EV录屏可以“本地录制”，也可以“在线直播”，录制方式分为【视频录制】和【音频录制】两种。</p><p>**视频录制：**视频录制可以全屏录制、选区录制、摄像头录制和不录制视频这几项。</p><p><img src="../image/640-1716188613355-1.png" alt="图片"></p><p>**音频录制：**音频录制可以单独录制麦克风声音、系统声音，也可以麦和系统声音一起录制，当然也可以选择不录音频。</p><p><img src="../image/640-1716188613355-2.webp" alt="图片"></p><p>**辅助工具：**除了视频和音频录制，软件还有辅助工具，有图片水印、文字水印，还可以嵌入摄像头和本地直播。</p><p><img src="../image/640-1716188613355-3.webp" alt="图片"></p><p>**保存：**录制后好的视频在【列表】里有显示，需要更改存储路径可以点“更改目录”。</p><p><img src="../image/640-1716188613355-4.webp" alt="图片"></p><p>此外，在**【设置】**中有基本设置、光标设置、定时设置、本地存盘、网络直播和快捷方式这几项。</p><p><img src="../image/640-1716188613356-5.webp" alt="图片"></p><p>特别这里的**“快捷键**”，可以自己设置喜欢的热键，方便大家录制时快速使用！</p><p><img src="../image/640-1716188613356-6.webp" alt="图片"></p><p>其他的大家自己去体验，软件就介绍到这里啦！</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
